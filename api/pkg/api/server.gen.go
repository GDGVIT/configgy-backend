// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	UserJWTScopes = "UserJWT.Scopes"
)

// Defines values for AuthzPermissionAccessLevel.
const (
	AuthzPermissionAccessLevelAdmin  AuthzPermissionAccessLevel = "admin"
	AuthzPermissionAccessLevelEditor AuthzPermissionAccessLevel = "editor"
	AuthzPermissionAccessLevelOwner  AuthzPermissionAccessLevel = "owner"
	AuthzPermissionAccessLevelViewer AuthzPermissionAccessLevel = "viewer"
)

// Defines values for AuthzPermissionIdentityType.
const (
	AuthzPermissionIdentityTypeGroup AuthzPermissionIdentityType = "group"
	AuthzPermissionIdentityTypeUser  AuthzPermissionIdentityType = "user"
)

// Defines values for AuthzPermissionResourceType.
const (
	AuthzPermissionResourceTypeCredential AuthzPermissionResourceType = "credential"
	AuthzPermissionResourceTypeGroup      AuthzPermissionResourceType = "group"
	AuthzPermissionResourceTypeVault      AuthzPermissionResourceType = "vault"
)

// Defines values for CredentialCreateRequestCredentialType.
const (
	FeatureFlags CredentialCreateRequestCredentialType = "feature_flags"
	File         CredentialCreateRequestCredentialType = "file"
	Password     CredentialCreateRequestCredentialType = "password"
)

// Defines values for GroupAddRequestGroupRole.
const (
	GroupAddRequestGroupRoleAdmin  GroupAddRequestGroupRole = "admin"
	GroupAddRequestGroupRoleEditor GroupAddRequestGroupRole = "editor"
	GroupAddRequestGroupRoleViewer GroupAddRequestGroupRole = "viewer"
)

// Defines values for GroupCreateRequestGroupMemberGroupRole.
const (
	GroupCreateRequestGroupMemberGroupRoleAdmin  GroupCreateRequestGroupMemberGroupRole = "admin"
	GroupCreateRequestGroupMemberGroupRoleEditor GroupCreateRequestGroupMemberGroupRole = "editor"
	GroupCreateRequestGroupMemberGroupRoleViewer GroupCreateRequestGroupMemberGroupRole = "viewer"
)

// Defines values for GroupUserGroupRole.
const (
	GroupUserGroupRoleAdmin  GroupUserGroupRole = "admin"
	GroupUserGroupRoleEditor GroupUserGroupRole = "editor"
	GroupUserGroupRoleOwner  GroupUserGroupRole = "owner"
	GroupUserGroupRoleViewer GroupUserGroupRole = "viewer"
)

// AuthToken defines model for AuthToken.
type AuthToken struct {
	AccessToken           string  `json:"access_token"`
	AccessTokenExpiresIn  int64   `json:"access_token_expires_in"`
	RefreshToken          string  `json:"refresh_token"`
	RefreshTokenExpiresIn int64   `json:"refresh_token_expires_in"`
	UserId                *string `json:"user_id"`
}

// AuthzCreateRequest defines model for AuthzCreateRequest.
type AuthzCreateRequest = []AuthzPermission

// AuthzCredentialGetResponse defines model for AuthzCredentialGetResponse.
type AuthzCredentialGetResponse = []AuthzPermission

// AuthzGroupGetResponse defines model for AuthzGroupGetResponse.
type AuthzGroupGetResponse = []AuthzPermission

// AuthzPermission defines model for AuthzPermission.
type AuthzPermission struct {
	AccessLevel    AuthzPermissionAccessLevel `json:"access_level"`
	AuthorizedKeys *[]struct {
		// EncryptedKey Resource Secret Key encrypted with the user's public key
		EncryptedKey string `json:"encrypted_key"`
		IdentityPid  string `json:"identity_pid"`
	} `json:"authorized_keys,omitempty"`
	IdentityPid  string                      `json:"identity_pid"`
	IdentityType AuthzPermissionIdentityType `json:"identity_type"`
	ResourcePid  string                      `json:"resource_pid"`
	ResourceType AuthzPermissionResourceType `json:"resource_type"`
}

// AuthzPermissionAccessLevel defines model for AuthzPermission.AccessLevel.
type AuthzPermissionAccessLevel string

// AuthzPermissionIdentityType defines model for AuthzPermission.IdentityType.
type AuthzPermissionIdentityType string

// AuthzPermissionResourceType defines model for AuthzPermission.ResourceType.
type AuthzPermissionResourceType string

// AuthzUserGetResponse defines model for AuthzUserGetResponse.
type AuthzUserGetResponse = []AuthzPermission

// AuthzVaultGetResponse defines model for AuthzVaultGetResponse.
type AuthzVaultGetResponse = []AuthzPermission

// CredentialCreateRequest defines model for CredentialCreateRequest.
type CredentialCreateRequest struct {
	CredentialType CredentialCreateRequestCredentialType `json:"credential_type"`
	FeatureFlags   *FeatureFlagCredential                `json:"feature_flags,omitempty"`
	File           *FileCredential                       `json:"file,omitempty"`
	Name           string                                `json:"name"`
	Notes          *string                               `json:"notes,omitempty"`
	Password       *PasswordCredential                   `json:"password,omitempty"`

	// VaultPid PID of the vault to which the credential belongs (added to default personal vault if not specified)
	VaultPid *string `json:"vault_pid,omitempty"`
}

// CredentialCreateRequestCredentialType defines model for CredentialCreateRequest.CredentialType.
type CredentialCreateRequestCredentialType string

// FeatureFlag defines model for FeatureFlag.
type FeatureFlag struct {
	Key   string `json:"key"`
	Name  string `json:"name"`
	Value string `json:"value"`
}

// FeatureFlagCredential defines model for FeatureFlagCredential.
type FeatureFlagCredential struct {
	Environment  *string       `json:"environment,omitempty"`
	FeatureFlags []FeatureFlag `json:"feature_flags"`
	Name         string        `json:"name"`
}

// FileCredential defines model for FileCredential.
type FileCredential struct {
	// File File upload field
	File []byte `json:"file"`
	Name string `json:"name"`
}

// GenericMessageResponse defines model for GenericMessageResponse.
type GenericMessageResponse struct {
	Message *string `json:"message,omitempty"`
	Success bool    `json:"success"`
}

// Group defines model for Group.
type Group struct {
	Description *string      `json:"description,omitempty"`
	Name        *string      `json:"name,omitempty"`
	Users       *[]GroupUser `json:"users,omitempty"`
}

// GroupAddRequest defines model for GroupAddRequest.
type GroupAddRequest struct {
	GroupRole *GroupAddRequestGroupRole `json:"group_role,omitempty"`
	UserId    *int                      `json:"user_id,omitempty"`
}

// GroupAddRequestGroupRole defines model for GroupAddRequest.GroupRole.
type GroupAddRequestGroupRole string

// GroupCreateRequest defines model for GroupCreateRequest.
type GroupCreateRequest struct {
	Description string                          `json:"description"`
	Members     []GroupCreateRequestGroupMember `json:"members"`
	Name        string                          `json:"name"`
}

// GroupCreateRequestGroupMember defines model for GroupCreateRequestGroupMember.
type GroupCreateRequestGroupMember struct {
	GroupRole GroupCreateRequestGroupMemberGroupRole `json:"group_role"`
	UserPid   string                                 `json:"user_pid"`
}

// GroupCreateRequestGroupMemberGroupRole defines model for GroupCreateRequestGroupMember.GroupRole.
type GroupCreateRequestGroupMemberGroupRole string

// GroupEditRequest defines model for GroupEditRequest.
type GroupEditRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// GroupRemoveRequest defines model for GroupRemoveRequest.
type GroupRemoveRequest = []int

// GroupUser defines model for GroupUser.
type GroupUser struct {
	Email     string             `json:"email"`
	GroupRole GroupUserGroupRole `json:"group_role"`
	Id        int                `json:"id"`
	Name      string             `json:"name"`
}

// GroupUserGroupRole defines model for GroupUser.GroupRole.
type GroupUserGroupRole string

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Message *string    `json:"message,omitempty"`
	Token   *AuthToken `json:"token,omitempty"`
}

// PasswordCredential defines model for PasswordCredential.
type PasswordCredential struct {
	// ExpiresAt Date and time at which the password expires
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	Password  []byte     `json:"password"`

	// PasswordStrength Password strength on a scale of 1 to 5
	PasswordStrength *int   `json:"passwordStrength,omitempty"`
	Totp             *TOTP  `json:"totp,omitempty"`
	Username         string `json:"username"`
}

// SignupRequest defines model for SignupRequest.
type SignupRequest struct {
	Email     openapi_types.Email `json:"email"`
	Name      string              `json:"name"`
	Password  string              `json:"password"`
	PublicKey string              `json:"public_key"`
}

// TOTP defines model for TOTP.
type TOTP struct {
	// TotpLength Length of generated TOTP
	TotpLength int `json:"totp_length"`

	// TotpPeriod TOTP period in seconds
	TotpPeriod int `json:"totp_period"`

	// TotpSecret Some TOTP Secret
	TotpSecret []byte `json:"totp_secret"`
}

// VaultCreateRequest defines model for VaultCreateRequest.
type VaultCreateRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	PublicKey   string `json:"public_key"`
}

// VaultEditRequest defines model for VaultEditRequest.
type VaultEditRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	PublicKey   *string `json:"public_key,omitempty"`
}

// CredentialFeatureFlagAddJSONBody defines parameters for CredentialFeatureFlagAdd.
type CredentialFeatureFlagAddJSONBody struct {
	FeatureFlags []FeatureFlag `json:"feature_flags"`
}

// CredentialFeatureFlagRemoveJSONBody defines parameters for CredentialFeatureFlagRemove.
type CredentialFeatureFlagRemoveJSONBody struct {
	FeatureFlags []string `json:"feature_flags"`
}

// VerifyUserParams defines parameters for VerifyUser.
type VerifyUserParams struct {
	// Token Verification Token
	Token string `form:"token" json:"token"`

	// UserPid User PID
	UserPid string `form:"user_pid" json:"user_pid"`
}

// AuthzCreateJSONRequestBody defines body for AuthzCreate for application/json ContentType.
type AuthzCreateJSONRequestBody = AuthzCreateRequest

// AuthzEditJSONRequestBody defines body for AuthzEdit for application/json ContentType.
type AuthzEditJSONRequestBody = AuthzPermission

// CredentialCreateJSONRequestBody defines body for CredentialCreate for application/json ContentType.
type CredentialCreateJSONRequestBody = CredentialCreateRequest

// CredentialEditJSONRequestBody defines body for CredentialEdit for application/json ContentType.
type CredentialEditJSONRequestBody = CredentialCreateRequest

// CredentialFeatureFlagAddJSONRequestBody defines body for CredentialFeatureFlagAdd for application/json ContentType.
type CredentialFeatureFlagAddJSONRequestBody CredentialFeatureFlagAddJSONBody

// CredentialFeatureFlagRemoveJSONRequestBody defines body for CredentialFeatureFlagRemove for application/json ContentType.
type CredentialFeatureFlagRemoveJSONRequestBody CredentialFeatureFlagRemoveJSONBody

// CredentialFileEditJSONRequestBody defines body for CredentialFileEdit for application/json ContentType.
type CredentialFileEditJSONRequestBody = FileCredential

// CredentialPasswordEditJSONRequestBody defines body for CredentialPasswordEdit for application/json ContentType.
type CredentialPasswordEditJSONRequestBody = PasswordCredential

// GroupAddJSONRequestBody defines body for GroupAdd for application/json ContentType.
type GroupAddJSONRequestBody = GroupAddRequest

// GroupCreateJSONRequestBody defines body for GroupCreate for application/json ContentType.
type GroupCreateJSONRequestBody = GroupCreateRequest

// GroupEditJSONRequestBody defines body for GroupEdit for application/json ContentType.
type GroupEditJSONRequestBody = GroupEditRequest

// GroupRemoveJSONRequestBody defines body for GroupRemove for application/json ContentType.
type GroupRemoveJSONRequestBody = GroupRemoveRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// SignupJSONRequestBody defines body for Signup for application/json ContentType.
type SignupJSONRequestBody = SignupRequest

// VaultCreateJSONRequestBody defines body for VaultCreate for application/json ContentType.
type VaultCreateJSONRequestBody = VaultCreateRequest

// VaultEditJSONRequestBody defines body for VaultEdit for application/json ContentType.
type VaultEditJSONRequestBody = VaultEditRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /authz/credential/{pid})
	AuthzCredentialGet(ctx echo.Context, pid string) error

	// (POST /authz/grant)
	AuthzCreate(ctx echo.Context) error

	// (GET /authz/group/{pid})
	AuthzGroupGet(ctx echo.Context, pid string) error

	// (POST /authz/modify/{pid})
	AuthzEdit(ctx echo.Context, pid string) error

	// (GET /authz/permission/{pid})
	AuthzGet(ctx echo.Context, pid string) error

	// (DELETE /authz/revoke/{pid})
	AuthzDelete(ctx echo.Context, pid string) error

	// (GET /authz/user)
	AuthzUserGet(ctx echo.Context) error

	// (GET /authz/vault/{pid})
	AuthzVaultGet(ctx echo.Context, pid string) error
	// Create a Credential
	// (POST /credential/create)
	CredentialCreate(ctx echo.Context) error
	// Delete a credential
	// (DELETE /credential/delete/{pid})
	CredentialDelete(ctx echo.Context, pid string) error
	// Edit a credential
	// (POST /credential/edit/{pid})
	CredentialEdit(ctx echo.Context, pid string) error
	// Get a credential by id
	// (GET /credential/{pid})
	CredentialGet(ctx echo.Context, pid string) error
	// Add Feature Flag K:V Pairs to existing Feature Flag Credential
	// (POST /credentials/featureflag/add/{pid})
	CredentialFeatureFlagAdd(ctx echo.Context, pid string) error
	// Remove Feature Flag K:V Pairs from existing Feature Flag Credential
	// (POST /credentials/featureflag/remove/{pid})
	CredentialFeatureFlagRemove(ctx echo.Context, pid string) error
	// Get Feature Flag value for key
	// (POST /credentials/featureflag/{pid}/{key})
	CredentialFeatureFlagGet(ctx echo.Context, pid string, key string) error
	// Edit a file credential
	// (POST /credentials/file/edit/{pid})
	CredentialFileEdit(ctx echo.Context, pid string) error
	// Edit a password credential
	// (POST /credentials/password/edit/{pid})
	CredentialPasswordEdit(ctx echo.Context, pid string) error

	// (GET /groups)
	GroupsGet(ctx echo.Context) error

	// (POST /groups/add/{pid})
	GroupAdd(ctx echo.Context, pid string) error

	// (POST /groups/create)
	GroupCreate(ctx echo.Context) error

	// (DELETE /groups/delete/{pid})
	GroupDelete(ctx echo.Context, pid string) error

	// (POST /groups/edit/{pid})
	GroupEdit(ctx echo.Context, pid string) error

	// (POST /groups/remove/{pid})
	GroupRemove(ctx echo.Context, pid string) error

	// (GET /groups/{pid})
	GroupGet(ctx echo.Context, pid string) error
	// User Login
	// (POST /user/login)
	Login(ctx echo.Context) error
	// User Signup
	// (POST /user/signup)
	Signup(ctx echo.Context) error
	// Verify User Email
	// (GET /user/verify)
	VerifyUser(ctx echo.Context, params VerifyUserParams) error
	// Create a vault
	// (POST /vault/create)
	VaultCreate(ctx echo.Context) error
	// Delete a vault
	// (DELETE /vault/delete/{pid})
	VaultDelete(ctx echo.Context, pid string) error
	// Edit a vault
	// (POST /vault/edit/{pid})
	VaultEdit(ctx echo.Context, pid string) error
	// Get a vault by id
	// (GET /vault/{pid})
	VaultGet(ctx echo.Context, pid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthzCredentialGet converts echo context to params.
func (w *ServerInterfaceWrapper) AuthzCredentialGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthzCredentialGet(ctx, pid)
	return err
}

// AuthzCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AuthzCreate(ctx echo.Context) error {
	var err error

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthzCreate(ctx)
	return err
}

// AuthzGroupGet converts echo context to params.
func (w *ServerInterfaceWrapper) AuthzGroupGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthzGroupGet(ctx, pid)
	return err
}

// AuthzEdit converts echo context to params.
func (w *ServerInterfaceWrapper) AuthzEdit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthzEdit(ctx, pid)
	return err
}

// AuthzGet converts echo context to params.
func (w *ServerInterfaceWrapper) AuthzGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthzGet(ctx, pid)
	return err
}

// AuthzDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AuthzDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthzDelete(ctx, pid)
	return err
}

// AuthzUserGet converts echo context to params.
func (w *ServerInterfaceWrapper) AuthzUserGet(ctx echo.Context) error {
	var err error

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthzUserGet(ctx)
	return err
}

// AuthzVaultGet converts echo context to params.
func (w *ServerInterfaceWrapper) AuthzVaultGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthzVaultGet(ctx, pid)
	return err
}

// CredentialCreate converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialCreate(ctx echo.Context) error {
	var err error

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CredentialCreate(ctx)
	return err
}

// CredentialDelete converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CredentialDelete(ctx, pid)
	return err
}

// CredentialEdit converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialEdit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CredentialEdit(ctx, pid)
	return err
}

// CredentialGet converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CredentialGet(ctx, pid)
	return err
}

// CredentialFeatureFlagAdd converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialFeatureFlagAdd(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CredentialFeatureFlagAdd(ctx, pid)
	return err
}

// CredentialFeatureFlagRemove converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialFeatureFlagRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CredentialFeatureFlagRemove(ctx, pid)
	return err
}

// CredentialFeatureFlagGet converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialFeatureFlagGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, ctx.Param("key"), &key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CredentialFeatureFlagGet(ctx, pid, key)
	return err
}

// CredentialFileEdit converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialFileEdit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CredentialFileEdit(ctx, pid)
	return err
}

// CredentialPasswordEdit converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialPasswordEdit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CredentialPasswordEdit(ctx, pid)
	return err
}

// GroupsGet converts echo context to params.
func (w *ServerInterfaceWrapper) GroupsGet(ctx echo.Context) error {
	var err error

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupsGet(ctx)
	return err
}

// GroupAdd converts echo context to params.
func (w *ServerInterfaceWrapper) GroupAdd(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupAdd(ctx, pid)
	return err
}

// GroupCreate converts echo context to params.
func (w *ServerInterfaceWrapper) GroupCreate(ctx echo.Context) error {
	var err error

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupCreate(ctx)
	return err
}

// GroupDelete converts echo context to params.
func (w *ServerInterfaceWrapper) GroupDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupDelete(ctx, pid)
	return err
}

// GroupEdit converts echo context to params.
func (w *ServerInterfaceWrapper) GroupEdit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupEdit(ctx, pid)
	return err
}

// GroupRemove converts echo context to params.
func (w *ServerInterfaceWrapper) GroupRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupRemove(ctx, pid)
	return err
}

// GroupGet converts echo context to params.
func (w *ServerInterfaceWrapper) GroupGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupGet(ctx, pid)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// VerifyUser converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyUserParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// ------------- Required query parameter "user_pid" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_pid", ctx.QueryParams(), &params.UserPid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_pid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifyUser(ctx, params)
	return err
}

// VaultCreate converts echo context to params.
func (w *ServerInterfaceWrapper) VaultCreate(ctx echo.Context) error {
	var err error

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VaultCreate(ctx)
	return err
}

// VaultDelete converts echo context to params.
func (w *ServerInterfaceWrapper) VaultDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VaultDelete(ctx, pid)
	return err
}

// VaultEdit converts echo context to params.
func (w *ServerInterfaceWrapper) VaultEdit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VaultEdit(ctx, pid)
	return err
}

// VaultGet converts echo context to params.
func (w *ServerInterfaceWrapper) VaultGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pid" -------------
	var pid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pid", runtime.ParamLocationPath, ctx.Param("pid"), &pid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pid: %s", err))
	}

	ctx.Set(UserJWTScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VaultGet(ctx, pid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/authz/credential/:pid", wrapper.AuthzCredentialGet)
	router.POST(baseURL+"/authz/grant", wrapper.AuthzCreate)
	router.GET(baseURL+"/authz/group/:pid", wrapper.AuthzGroupGet)
	router.POST(baseURL+"/authz/modify/:pid", wrapper.AuthzEdit)
	router.GET(baseURL+"/authz/permission/:pid", wrapper.AuthzGet)
	router.DELETE(baseURL+"/authz/revoke/:pid", wrapper.AuthzDelete)
	router.GET(baseURL+"/authz/user", wrapper.AuthzUserGet)
	router.GET(baseURL+"/authz/vault/:pid", wrapper.AuthzVaultGet)
	router.POST(baseURL+"/credential/create", wrapper.CredentialCreate)
	router.DELETE(baseURL+"/credential/delete/:pid", wrapper.CredentialDelete)
	router.POST(baseURL+"/credential/edit/:pid", wrapper.CredentialEdit)
	router.GET(baseURL+"/credential/:pid", wrapper.CredentialGet)
	router.POST(baseURL+"/credentials/featureflag/add/:pid", wrapper.CredentialFeatureFlagAdd)
	router.POST(baseURL+"/credentials/featureflag/remove/:pid", wrapper.CredentialFeatureFlagRemove)
	router.POST(baseURL+"/credentials/featureflag/:pid/:key", wrapper.CredentialFeatureFlagGet)
	router.POST(baseURL+"/credentials/file/edit/:pid", wrapper.CredentialFileEdit)
	router.POST(baseURL+"/credentials/password/edit/:pid", wrapper.CredentialPasswordEdit)
	router.GET(baseURL+"/groups", wrapper.GroupsGet)
	router.POST(baseURL+"/groups/add/:pid", wrapper.GroupAdd)
	router.POST(baseURL+"/groups/create", wrapper.GroupCreate)
	router.DELETE(baseURL+"/groups/delete/:pid", wrapper.GroupDelete)
	router.POST(baseURL+"/groups/edit/:pid", wrapper.GroupEdit)
	router.POST(baseURL+"/groups/remove/:pid", wrapper.GroupRemove)
	router.GET(baseURL+"/groups/:pid", wrapper.GroupGet)
	router.POST(baseURL+"/user/login", wrapper.Login)
	router.POST(baseURL+"/user/signup", wrapper.Signup)
	router.GET(baseURL+"/user/verify", wrapper.VerifyUser)
	router.POST(baseURL+"/vault/create", wrapper.VaultCreate)
	router.DELETE(baseURL+"/vault/delete/:pid", wrapper.VaultDelete)
	router.POST(baseURL+"/vault/edit/:pid", wrapper.VaultEdit)
	router.GET(baseURL+"/vault/:pid", wrapper.VaultGet)

}
